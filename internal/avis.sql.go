// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: avis.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const checkAvisByID = `-- name: CheckAvisByID :one
SELECT EXISTS (
    SELECT 1
    FROM avis
    WHERE id = $1
    AND deleted_at IS NULL
)
`

func (q *Queries) CheckAvisByID(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkAvisByID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createAvis = `-- name: CreateAvis :one
INSERT INTO avis (user_id_target, user_id_writer, comment, note)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at, deleted_at, user_id_target, user_id_writer, note, comment
`

type CreateAvisParams struct {
	UserIDTarget uuid.UUID `json:"user_id_target"`
	UserIDWriter uuid.UUID `json:"user_id_writer"`
	Comment      string    `json:"comment"`
	Note         int32     `json:"note"`
}

func (q *Queries) CreateAvis(ctx context.Context, arg CreateAvisParams) (Avi, error) {
	row := q.db.QueryRowContext(ctx, createAvis,
		arg.UserIDTarget,
		arg.UserIDWriter,
		arg.Comment,
		arg.Note,
	)
	var i Avi
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserIDTarget,
		&i.UserIDWriter,
		&i.Note,
		&i.Comment,
	)
	return i, err
}

const deleteAvisByID = `-- name: DeleteAvisByID :exec
UPDATE
    avis
SET
    deleted_at = NOW()
WHERE 
    id = $1
`

func (q *Queries) DeleteAvisByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAvisByID, id)
	return err
}

const getAllAvis = `-- name: GetAllAvis :many
SELECT id, created_at, updated_at, deleted_at, user_id_target, user_id_writer, note, comment FROM avis
WHERE deleted_at IS NULL
ORDER BY
CASE WHEN $1::bool THEN note END asc,
CASE WHEN $2::bool THEN note END desc
LIMIT $4 OFFSET $3
`

type GetAllAvisParams struct {
	NoteAsc  bool  `json:"note_asc"`
	NoteDesc bool  `json:"note_desc"`
	Offset   int32 `json:"offset"`
	Limit    int32 `json:"limit"`
}

func (q *Queries) GetAllAvis(ctx context.Context, arg GetAllAvisParams) ([]Avi, error) {
	rows, err := q.db.QueryContext(ctx, getAllAvis,
		arg.NoteAsc,
		arg.NoteDesc,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Avi{}
	for rows.Next() {
		var i Avi
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.UserIDTarget,
			&i.UserIDWriter,
			&i.Note,
			&i.Comment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAvisByID = `-- name: GetAvisByID :one
SELECT id, created_at, updated_at, deleted_at, user_id_target, user_id_writer, note, comment FROM avis
WHERE id = $1
AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetAvisByID(ctx context.Context, id uuid.UUID) (Avi, error) {
	row := q.db.QueryRowContext(ctx, getAvisByID, id)
	var i Avi
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserIDTarget,
		&i.UserIDWriter,
		&i.Note,
		&i.Comment,
	)
	return i, err
}

const getAvisByUserID = `-- name: GetAvisByUserID :many
SELECT id, created_at, updated_at, deleted_at, user_id_target, user_id_writer, note, comment FROM avis
WHERE user_id_target = $1
AND deleted_at IS NULL
`

func (q *Queries) GetAvisByUserID(ctx context.Context, userIDTarget uuid.UUID) ([]Avi, error) {
	rows, err := q.db.QueryContext(ctx, getAvisByUserID, userIDTarget)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Avi{}
	for rows.Next() {
		var i Avi
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.UserIDTarget,
			&i.UserIDWriter,
			&i.Note,
			&i.Comment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAvis = `-- name: UpdateAvis :exec
UPDATE 
    avis
SET
    comment = $2,
    note = $3,
    updated_at = NOW()
WHERE
    id = $1
`

type UpdateAvisParams struct {
	ID      uuid.UUID `json:"id"`
	Comment string    `json:"comment"`
	Note    int32     `json:"note"`
}

func (q *Queries) UpdateAvis(ctx context.Context, arg UpdateAvisParams) error {
	_, err := q.db.ExecContext(ctx, updateAvis, arg.ID, arg.Comment, arg.Note)
	return err
}
